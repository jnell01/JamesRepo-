import sudoku

def testConvertToSets():
    ary = [[0, 1, 2], [1, 0, 2], [0, 1, 0]]
    s = set(range(1, 10))
    assert sudoku.convertToSets(ary) == [[s, {1}, {2}], [{1}, s, {2}], [s, {1}, s]]
    assert type(ary[0][0]) is set, print("The original array has been changed.")

def testConvertToInts():
    sets = [[{1, 2}, {3}, {4}], [{1}, {3, 5, 7}, {2}], [{2, 3}, {2}, {3}]]
    assert sudoku.convertToInts(sets) == [[0, 3, 4], [1, 0, 2], [0, 2, 3]]
    assert type(sets[0][0]) is int, print("The original array has been changed.")

def testGetRowLocations():
    lst = [(5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8)]
    assert sudoku.getRowLocations(5) == lst

def testGetColumnLocations():
    lst = [(0, 5), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5), (6, 5), (7, 5), (8, 5)]
    assert sudoku.getColumnLocations(5) == lst

def testGetBoxLocations():
    lst = [(3, 0), (3, 1), (3, 2), (4, 0), (4, 1), (4, 2), (5, 0), (5, 1), (5, 2)]
    assert sudoku.getBoxLocations((3, 2)) == lst

    lst = [[4, 0, 0,  0, 0, 3,  0, 7, 0],[0, 0, 1,  0, 0, 9,  5, 0, 8],[0, 0, 0,  6, 0, 8,  4, 1, 3],
    [0, 1, 0,  9, 0, 0,  3, 0, 0],[0, 0, 0,  0, 5, 0,  0, 0, 0],
    [0, 0, 4,  0, 0, 6,  0, 8, 0],[7, 9, 2,  8, 0, 5,  0, 0, 0],[3, 0, 5,  4, 0, 0,  9, 0, 0],
    [0, 4, 0,  2, 0, 0,  8, 0, 5]]

    assert sudoku.getBoxLocations((8,8)) == [(6,6),(6,7),(6,8),(7,6),(7,7),(7,8),(8,6),(8,7),(8,8)]
    assert sudoku.getBoxLocations((3,4)) == [(3,3),(3,4),(3,5),(4,3),(4,4),(4,5),(5,3),(5,4),(5,5)]

def testEliminate():
    sets = [[{1, 2}, {3}, {4}], [{1}, {3, 5, 7}, {2}], [{2, 3}, {2}, {1, 2, 3}]]
    location = (1, 2) # contains {2}
    count = sudoku.eliminate(sets, location, [(0, 0), (1, 0), (2, 2)])
    assert count == 2
    assert sets == [[{1}, {3}, {4}], [{1}, {3, 5, 7}, {2}], [{2, 3}, {2}, {1, 3}]]

def testEliminate2():
    sets = [[{4}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9},
    {1, 2, 3, 4, 5, 6, 7, 8, 9}, {3}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {7}, {1, 2, 3, 4, 5, 6, 7, 8, 9}],
    [{1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {1}, {1, 2, 3, 4, 5, 6, 7, 8, 9},
    {1, 2, 3, 4, 5, 6, 7, 8, 9}, {9}, {5}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {8}], [{1, 2, 3, 4, 5, 6, 7, 8, 9},
    {1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {6}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {8}, {4}, {1}, {3}],
    [{1, 2, 3, 4, 5, 6, 7, 8, 9}, {1}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {9}, {1, 2, 3, 4, 5, 6, 7, 8, 9},
    {1, 2, 3, 4, 5, 6, 7, 8, 9}, {3}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9}],
    [{1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9},
    {1, 2, 3, 4, 5, 6, 7, 8, 9}, {5}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9},
    {1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9}], [{1, 2, 3, 4, 5, 6, 7, 8, 9},
    {1, 2, 3, 4, 5, 6, 7, 8, 9}, {4}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9},
    {6}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {8}, {1, 2, 3, 4, 5, 6, 7, 8, 9}], [{7}, {9}, {2}, {8},
    {1, 2, 3, 4, 5, 6, 7, 8, 9}, {5}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9},
    {1, 2, 3, 4, 5, 6, 7, 8, 9}], [{3}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {5}, {4},
    {1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {9}, {1, 2, 3, 4, 5, 6, 7, 8, 9},
    {1, 2, 3, 4, 5, 6, 7, 8, 9}], [{1, 2, 3, 4, 5, 6, 7, 8, 9}, {4}, {1, 2, 3, 4, 5, 6, 7, 8, 9},
    {2}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {1, 2, 3, 4, 5, 6, 7, 8, 9}, {8}, {1, 2, 3, 4, 5, 6, 7, 8, 9},
    {5}]]

    location = (0,0)
    count = sudoku.eliminate(sets,location,[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)])
    assert count == 6
    assert sets[location[0]] == [{4}, {1, 2, 3, 5, 6, 7, 8, 9}, {1, 2, 3, 5, 6, 7, 8, 9}, {1, 2, 3, 5, 6, 7, 8, 9},
    {1, 2, 3, 5, 6, 7, 8, 9}, {3}, {1, 2, 3, 5, 6, 7, 8, 9}, {7}, {1, 2, 3, 5, 6, 7, 8, 9}]

def testEliminate3():

    sets = [[{1, 2}, {3}, {4}], [{1}, {3, 5, 7}, {2}], [{2, 3}, {2}, {1, 2, 3}]]
    location = (1,2) #contains 2
    count = sudoku.eliminate(sets, location, [(2,0),(1,1)])
    assert count == 1
    assert sets == [[{1, 2}, {3}, {4}], [{1}, {3, 5, 7}, {2}], [{3}, {2}, {1, 2, 3}]]

def testIsSolved():
    # Just check whether every cell has been reduced to one number
    array = [[{1}] * 9] * 9
    assert sudoku.isSolved(array) == True

    array[3][5] = {1, 2}
    assert sudoku.isSolved(array) == False

    array = [[{1}] * 9] * 9
    assert (all([len(array[r][c]) == 1 for r in range(0, 9) for c in range(0, 9)])) == True
    array[3][5] = {1, 2}
    assert (all([len(array[r][c]) == 1 for r in range(0, 9) for c in range(0, 9)])) == False


def testSolve():
    # Easy
    sudoku1 = [[4, 0, 0,  0, 0, 3,  0, 7, 0],
               [0, 0, 1,  0, 0, 9,  5, 0, 8],
               [0, 0, 0,  6, 0, 8,  4, 1, 3],

               [0, 1, 0,  9, 0, 0,  3, 0, 0],
               [0, 0, 0,  0, 5, 0,  0, 0, 0],
               [0, 0, 4,  0, 0, 6,  0, 8, 0],

               [7, 9, 2,  8, 0, 5,  0, 0, 0],
               [3, 0, 5,  4, 0, 0,  9, 0, 0],
               [0, 4, 0,  2, 0, 0,  8, 0, 5]]

    solved1 = [[4, 6, 8,  5, 1, 3,  2, 7, 9],
               [2, 3, 1,  7, 4, 9,  5, 6, 8],
               [5, 7, 9,  6, 2, 8,  4, 1, 3],

               [6, 1, 7,  9, 8, 2,  3, 5, 4],
               [8, 2, 3,  1, 5, 4,  7, 9, 6],
               [9, 5, 4,  3, 7, 6,  1, 8, 2],

               [7, 9, 2,  8, 3, 5,  6, 4, 1],
               [3, 8, 5,  4, 6, 1,  9, 2, 7],
               [1, 4, 6,  2, 9, 7,  8, 3, 5]]
    # Easy
    sudoku2 = [[0, 0, 0,  7, 0, 0,  6, 8, 9],
               [3, 0, 8,  0, 0, 0,  2, 0, 0],
               [0, 0, 0,  8, 1, 0,  0, 4, 0],

               [6, 0, 0,  0, 0, 0,  8, 0, 4],
               [8, 0, 0,  3, 4, 9,  0, 0, 5],
               [7, 0, 5,  0, 0, 0,  0, 0, 3],

               [0, 8, 0,  0, 7, 6,  0, 0, 0],
               [0, 0, 7,  0, 0, 0,  1, 0, 8],
               [9, 5, 1,  0, 0, 8,  0, 0, 0]]

    solved2 = [[1, 2, 4,  7, 5, 3,  6, 8, 9],
               [3, 7, 8,  9, 6, 4,  2, 5, 1],
               [5, 9, 6,  8, 1, 2,  3, 4, 7],

               [6, 3, 9,  5, 2, 7,  8, 1, 4],
               [8, 1, 2,  3, 4, 9,  7, 6, 5],
               [7, 4, 5,  6, 8, 1,  9, 2, 3],

               [4, 8, 3,  1, 7, 6,  5, 9, 2],
               [2, 6, 7,  4, 9, 5,  1, 3, 8],
               [9, 5, 1,  2, 3, 8,  4, 7, 6]]

    # Hard
    sudoku3 = [[9, 0, 0,  0, 0, 8,  0, 0, 0],
               [0, 0, 0,  0, 3, 2,  0, 0, 0],
               [6, 8, 0,  9, 0, 1,  0, 7, 0],

               [8, 0, 9,  5, 2, 0,  0, 3, 0],
               [2, 0, 0,  0, 0, 0,  0, 0, 5],
               [0, 4, 0,  0, 9, 3,  7, 0, 8],

               [0, 2, 0,  3, 0, 9,  0, 6, 4],
               [0, 0, 0,  2, 8, 0,  0, 0, 0],
               [0, 0, 0,  6, 0, 0,  0, 0, 3]]

    solved3 = [[9, 0, 0,  0, 0, 8,  0, 0, 0],
               [0, 0, 0,  0, 3, 2,  0, 0, 0],
               [6, 8, 0,  9, 0, 1,  0, 7, 2],

               [8, 0, 9,  5, 2, 0,  0, 3, 0],
               [2, 0, 0,  0, 0, 0,  0, 0, 5],
               [5, 4, 6,  1, 9, 3,  7, 2, 8],

               [0, 2, 0,  3, 0, 9,  0, 6, 4],
               [0, 0, 0,  2, 8, 0,  0, 0, 0],
               [0, 0, 0,  6, 0, 0,  0, 0, 3]]

    assert sudoku.solve(sudoku1) == solved1
    assert sudoku.solve(sudoku2) == solved2
    assert sudoku.solve(sudoku3) == solved3
